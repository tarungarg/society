c
params[:roles].include? 'president'
params[:roles].include? :president
params[:roles]
params
Tenant.current.has_presidents
@member.has_role?(:president) && !Tenant.current.has_presidents
c
current_user.has_role? :president
current_user
c
Carpool.tagged_with("aaa")
Carpool.tagged_with("aaa", on: 'carpool')
Carpool.tagged_with("aaa")
c
Carpool.tagged_with("aaa")
c
 where('carpools.date >= ?', ref_date)c
 where('carpools.date >= ?', ref_date)
Carpool.first.created_at
Carpool.first.date
 where('carpools.created_at >= ?', ref_date)
 where('carpools.created_at = ?', ref_date)
 where('carpools.date = ?', ref_date)
carpools.date where('carpools.date = ?', ref_date)
carpools.date
ref_datecarpools.date
ref_date
c
@job.files
c
@job.files
@job.file
c
comment.created_timestamp
c
Time.zone
c
cookies["time_zone"]
c
Gon::Base.render_data
Gon::Base.render_datac
gon.time_zone
c
gon.time_zone
c
Gon::Base.render_datac
Gon::Base
Gon::Base.
gon
c
gon.time_zone
c
gon.time_zone
c
gon.time_zone
gon.time_Zone
gon
q
cookies["time_zone"]
Time.zone
cookies
cookies["time_zone"]
c
cookies["time_zone"]
c
 cookies["time_zone"]
TZInfo::Timezone.get(cookies["time_zone"])
Time.zone
c
cookies["time_zone"]
   31:     end
cookies["time_zone"]
c
q
c
{ success: "alert-success", error: "alert-danger", alert: "alert-warning", notice: "alert-info" }[flash_type.to_sym] 
{ success: "alert-success", error: "alert-danger", alert: "alert-warning", notice: "alert-info" }[notice.to_sym] 
{ success: "alert-success", error: "alert-danger", alert: "alert-warning", notice: "alert-info" }[:notice] 
{ success: "alert-success", error: "alert-danger", alert: "alert-warning", notice: "alert-info" }[notice] 
{ success: "alert-success", error: "alert-danger", alert: "alert-warning", notice: "alert-info" }[flash_type] 
flash_type{ success: "alert-success", error: "alert-danger", alert: "alert-warning", notice: "alert-info" }[flash_type] 
flash_type
c
n
s
c
lambda { |user| true }
c
user
c
q
user
block
pp &block
&block
c
request.session[:user_id]
c
request.subdomain.blank? || request.subdomain == domain
request.subdomain.blank?
domain
request.subdomain
q
Tenant.currentq
Tenant.current
q
@member.tenant_id = q
@member.tenant
@member.teant
@member
    Tenant.find_by(domain: request.subdomain) unless main_domain?
    Tenant.find_by_url(request.subdomain) unless main_domain?
current_tenant
current_account
member_params
c
resource.tenant
resource.tenant_domain
c
qc
q
request.subdomain
q
resource.tenant_domain
resource.tenant_name
resource
c
q
current_user
current
user_signed_in?
user_signed_in?%
c
resource.tenant.domain
c
self.tenant
q
Tenant.all.map(&:domain)
Tenant.map(&:domain)
self.tenant
self
q
self.tenantq
self.tenant
q
self.tenant
self.society_profile
self.profile
c
Tenant.find_by(domain: 'xxxxx')
self.tenant
self
c
Tenant.where(domain: 'ffff').first
Tenant.where(domain: 'ffff').fist
Tenant.where(domain: 'ffff')
Tenant.find_by(domain: 'ffff')
Tenant.order('id desc')
Tenant.last(2).order('id desc')
Tenant.last(2).order('desc')
Tenant.last(-2)
self.tenant
self.tenatn
self
user
tenat
q
tenant
q
Tenant.find_by(domain: 'ccccc')
Tenant.last
Tenant.all
self.tenant.domain
self.tenant
self
tenant.domain
q
resource.tenant
resource
q
resource.tenant
resource
c
request.subdomain
request
c
domain
c
domain
c
Apartment::Tenant.create(domain)
domain
c
selfc
self
c
domain
q
domain
c
q
self.tenant
self.society_profile
self
q
self.tenant
self.society_profile
self
q
selfq
q
self
q
self
q
self
subdomain
q
selfq
self
subdomain
c
subdomain
user
params
